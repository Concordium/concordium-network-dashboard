syntax = "proto3";

import "google/protobuf/wrappers.proto";

package concordium;

message NumberResponse {
  uint64 value = 1;
}

message SuccessResponse {
  bool value = 1;
}

message StringResponse {
  string value = 1;
}

message PeerConnectRequest {
  google.protobuf.StringValue ip = 1;
  google.protobuf.Int32Value port = 2;
}

message PeerElement {
  google.protobuf.StringValue node_id = 1;
  google.protobuf.UInt32Value port = 2;
  google.protobuf.StringValue ip = 3;
}

message PeerListResponse {
  string peer_type = 1;
  repeated PeerElement peer = 2;
}

message PeerStatsResponse {
  message PeerStats {
    string node_id = 1;
    uint64 packets_sent = 2;
    uint64 packets_received = 3;
    uint64 measured_latency  = 4;
  }
  repeated PeerStats peerstats = 1;
}

message SendMessageRequest {
  google.protobuf.StringValue node_id = 1;
  google.protobuf.Int32Value network_id = 2;
  google.protobuf.BytesValue message = 3;
  google.protobuf.BoolValue broadcast = 4;
}

message MessageDirect {
  bytes data = 1;
}

message MessageBroadcast {
  bytes data = 1;
}

message MessageNone {}

message P2PNetworkMessage {
  uint64 received_at = 1;
  uint64 sent_at = 2;
  string sender = 3;
  uint32 network_id = 4;
  bytes message_id = 5;
  oneof payload {
    MessageDirect message_direct = 20;
    MessageBroadcast message_broadcast = 21;
    MessageNone message_none = 22;
  };
}

message PoCSendTransactionMessage {
  uint32 network_id = 1;
  string message_content = 2;
}
message NetworkChangeRequest {
  google.protobuf.Int32Value network_id = 1;
}

message NodeInfoResponse {
  google.protobuf.StringValue node_id = 1;
  uint64 current_localtime = 2;
  string peer_type = 3;
  bool consensus_baker_running = 4;
  bool consensus_running = 5;
  string consensus_type = 6;
}

message SuccessfulJsonPayloadResponse {
  string json_value = 1;
}

message BlockHash {
  string block_hash = 1;
}

message TransactionHash {
  string transaction_hash = 1;
}

message BlockHashAndAmount {
  string block_hash = 1;
  uint64 amount = 2;
}

message SendTransactionRequest {
  uint32 network_id = 1;
  bytes payload = 2;
}

message SuccessfulBytePayloadResponse {
  bytes payload = 1;
}

message AccountAddress {
  bytes payload = 1;
}

message ContractInstanceAddress {
  bytes payload = 1;
}

message GetAddressInfoRequest {
  string block_hash = 1;
  string address = 2;
}

message GetModuleSourceRequest {
  string block_hash = 1;
  string module_ref = 2;
}

message TpsRequest {
  uint32 network_id = 1;
  string id = 2;
  string directory = 3;
}

message DumpRequest {
  string file = 1;
  bool raw = 2;
}

message Empty {}

message RetransmitRequestMessage {
  string id = 1;
  uint32 element_type = 2;
  google.protobuf.UInt64Value since = 3;
  uint32 network_id = 4;
}

message GRPCSkovStats {
  uint32 skov_block_receipt = 1; // in seconds
  uint32 skov_block_entry = 2; // in us
  uint32 skov_block_query = 3; // in us
  uint32 skov_finalization_receipt = 4; // in seconds
  uint32 skov_finalization_entry = 5; // in us
  uint32 skov_finalization_query = 6; // in us
}

message SuccesfulStructResponse {
  oneof payload {
    GRPCSkovStats skov_stats = 1;
  }
}

service P2P {
  // Suggest this peer connects to submitted peer details
  rpc PeerConnect (PeerConnectRequest) returns (SuccessResponse) {}
  // Peer uptime in milliseconds
  rpc PeerUptime(Empty) returns (NumberResponse) {}
  // Peer total number of sent packets
  rpc PeerTotalSent(Empty) returns (NumberResponse) {}
  // Peer total number of received packets
  rpc PeerTotalReceived(Empty) returns(NumberResponse) {}
  // Peer client software version
  rpc PeerVersion(Empty) returns (StringResponse) {}
  rpc SendMessage(SendMessageRequest) returns (SuccessResponse) {}
  // Stats for connected peers
  rpc PeerStats(Empty) returns (PeerStatsResponse) {}
  // List of connected peers
  rpc PeerList(Empty) returns (PeerListResponse) {}
  rpc SubscriptionStart(Empty) returns (SuccessResponse) {}
  rpc SubscriptionStop(Empty) returns (SuccessResponse) {}
  rpc SubscriptionPoll(Empty) returns (P2PNetworkMessage) {}
  rpc BanNode(PeerElement) returns (SuccessResponse) {}
  rpc UnbanNode(PeerElement) returns (SuccessResponse) {}
  rpc JoinNetwork(NetworkChangeRequest) returns (SuccessResponse) {}
  rpc LeaveNetwork(NetworkChangeRequest) returns (SuccessResponse) {}
  // Get information about the running Node
  rpc NodeInfo(Empty) returns (NodeInfoResponse) {}
  // see https://gitlab.com/Concordium/notes-wiki/wikis/Consensus-queries#getconsensusstatus
  rpc GetConsensusStatus(Empty) returns (SuccessfulJsonPayloadResponse) {}
  // see https://gitlab.com/Concordium/notes-wiki/wikis/Consensus-queries#getblockinfo
  rpc GetBlockInfo(BlockHash) returns (SuccessfulJsonPayloadResponse) {}
  // see https://gitlab.com/Concordium/notes-wiki/wikis/Consensus-queries#getancestors
  rpc GetAncestors(BlockHashAndAmount) returns (SuccessfulJsonPayloadResponse) {}
  // see https://gitlab.com/Concordium/notes-wiki/wikis/Consensus-queries#getbranches
  rpc GetBranches(Empty) returns (SuccessfulJsonPayloadResponse) {}
  // Submit a local transaction
  rpc SendTransaction(SendTransactionRequest) returns (SuccessResponse) {}

  // Start the baker in the consensus module
  rpc StartBaker(Empty) returns (SuccessResponse) {}
  // Stop the baker in the consensus module
  rpc StopBaker(Empty) returns (SuccessResponse) {}

  rpc GetAccountList(BlockHash) returns (SuccessfulJsonPayloadResponse) {}
  rpc GetInstances(BlockHash) returns (SuccessfulJsonPayloadResponse) {}
  rpc GetAccountInfo(GetAddressInfoRequest) returns (SuccessfulJsonPayloadResponse) {}
  rpc GetInstanceInfo(GetAddressInfoRequest) returns (SuccessfulJsonPayloadResponse) {}
  rpc GetRewardStatus(BlockHash) returns (SuccessfulJsonPayloadResponse) {}
  rpc GetBirkParameters(BlockHash) returns (SuccessfulJsonPayloadResponse) {}
  rpc GetModuleList(BlockHash) returns (SuccessfulJsonPayloadResponse) {}
  rpc GetModuleSource(GetModuleSourceRequest) returns (SuccessfulBytePayloadResponse) {}

  rpc GetBannedPeers(Empty) returns (PeerListResponse) {}
  rpc Shutdown(Empty) returns (SuccessResponse) {}
  rpc TpsTest(TpsRequest) returns (SuccessResponse) {}
  rpc DumpStart(DumpRequest) returns (SuccessResponse) {}
  rpc DumpStop(Empty) returns (SuccessResponse) {}
  rpc RetransmitRequest(RetransmitRequestMessage) returns (SuccessResponse) {}
  rpc GetSkovStats(Empty) returns (SuccesfulStructResponse) {}
  rpc HookTransaction(TransactionHash) returns (SuccessfulJsonPayloadResponse) {}
}
