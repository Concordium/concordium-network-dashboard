syntax = "proto3";

import "google/protobuf/wrappers.proto";

message NumberResponse {
  uint64 value = 1;
}

message SuccessResponse {
  bool value = 1;
}

message StringResponse {
  string value = 1;
}

message PeerConnectRequest {
  google.protobuf.StringValue ip = 1;
  google.protobuf.Int32Value port = 2;
}

message PeerElement {
  google.protobuf.StringValue node_id = 1;
  google.protobuf.Int32Value port = 2;
  google.protobuf.StringValue ip = 3;
}

message PeerListResponse {
          string node_type = 1;
          repeated PeerElement peer = 2;
}

message PeerStatsResponse {
  message PeerStats {
    string node_id = 1;
    uint64 packets_sent = 2;
    uint64 packets_received = 3;
    uint64 measured_latency  = 4;
  }
  repeated PeerStats peerstats = 1;
}

message SendMessageRequest {
  google.protobuf.StringValue node_id = 1;
  google.protobuf.Int32Value network_id = 2;
  google.protobuf.BytesValue message = 3;
  google.protobuf.BoolValue broadcast = 4;
}

message MessageDirect {
  bytes data = 1;
}

message MessageBroadcast {
  bytes data = 1;
}

message MessageNone {}

message P2PNetworkMessage {
  uint64 received_at = 1;
  uint64 sent_at = 2;
  string sender = 3;
  uint32 network_id = 4;
  string message_id = 5;
  oneof payload {
    MessageDirect message_direct = 20;
    MessageBroadcast message_broadcast = 21;
    MessageNone message_none = 22;
  };
}

message PoCSendTransactionMessage {
  uint32 network_id = 1;
  string message_content = 2;
}
message NetworkChangeRequest {
  google.protobuf.Int32Value network_id = 1;
}

message  BestBlockInfoMessage {
  string best_block_info = 1;
}

message NodeInfoResponse {
   google.protobuf.StringValue node_id = 1;
   uint64 current_localtime = 2;
  string node_type = 3;
}

message Empty {}

service P2P {
  // Suggest this peer connects to submitted peer details
  rpc PeerConnect (PeerConnectRequest) returns (SuccessResponse) {}
  // Peer uptime in milliseconds
  rpc PeerUptime(Empty) returns (NumberResponse) {}
  // Peer total number of sent packets
  rpc PeerTotalSent(Empty) returns (NumberResponse) {}
  // Peer total number of received packets
  rpc PeerTotalReceived(Empty) returns(NumberResponse) {}
  // Peer client software version
  rpc PeerVersion(Empty) returns (StringResponse) {}
  rpc SendMessage(SendMessageRequest) returns (SuccessResponse) {}
  // Stats for connected peers
  rpc PeerStats(Empty) returns (PeerStatsResponse) {}
  // List of connected peers
  rpc PeerList(Empty) returns (PeerListResponse) {}
  rpc SubscriptionStart(Empty) returns (SuccessResponse) {}
  rpc SubscriptionStop(Empty) returns (SuccessResponse) {}
  rpc SubscriptionPoll(Empty) returns (P2PNetworkMessage) {}
  rpc BanNode(PeerElement) returns (SuccessResponse) {}
  rpc UnbanNode(PeerElement) returns (SuccessResponse) {}
  rpc JoinNetwork(NetworkChangeRequest) returns (SuccessResponse) {}
  rpc LeaveNetwork(NetworkChangeRequest) returns (SuccessResponse) {}
  // @TEMP helper endpoint for PoC testing
  rpc PoCSendTransaction(PoCSendTransactionMessage) returns (SuccessResponse) {}
  // Block info for peer's current 'best' view of the latest global state
  rpc GetBestBlockInfo(Empty) returns (BestBlockInfoMessage) {}
  // Get information about the running Node
  rpc NodeInfo(Empty) returns (NodeInfoResponse) {}
}
