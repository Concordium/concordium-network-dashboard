module Concordium_p2p_rpc exposing (Empty, MessageBroadcast, MessageDirect, MessageNone, NetworkChangeRequest, NumberResponse, P2PNetworkMessage, Payload(..), PeerConnectRequest, PeerElement, PeerListResponse, PeerStatsResponse, PeerStatsResponse_PeerStats, SendMessageRequest, StringResponse, SuccessResponse, emptyDecoder, emptyEncoder, messageBroadcastDecoder, messageBroadcastEncoder, messageDirectDecoder, messageDirectEncoder, messageNoneDecoder, messageNoneEncoder, networkChangeRequestDecoder, networkChangeRequestEncoder, numberResponseDecoder, numberResponseEncoder, p2PNetworkMessageDecoder, p2PNetworkMessageEncoder, payloadDecoder, payloadEncoder, peerConnectRequestDecoder, peerConnectRequestEncoder, peerElementDecoder, peerElementEncoder, peerListResponseDecoder, peerListResponseEncoder, peerStatsResponseDecoder, peerStatsResponseEncoder, peerStatsResponse_PeerStatsDecoder, peerStatsResponse_PeerStatsEncoder, sendMessageRequestDecoder, sendMessageRequestEncoder, stringResponseDecoder, stringResponseEncoder, successResponseDecoder, successResponseEncoder)

-- DO NOT EDIT
-- AUTOGENERATED BY THE ELM PROTOCOL BUFFER COMPILER
-- https://github.com/tiziano88/elm-protobuf
-- source file: concordium_p2p_rpc.proto

import Json.Decode as JD
import Json.Encode as JE
import Protobuf exposing (..)


type alias NumberResponse =
    { value : Int -- 1
    }


numberResponseDecoder : JD.Decoder NumberResponse
numberResponseDecoder =
    JD.lazy <|
        \_ ->
            decode NumberResponse
                |> required "value" intDecoder 0


numberResponseEncoder : NumberResponse -> JE.Value
numberResponseEncoder v =
    JE.object <|
        List.filterMap identity <|
            [ requiredFieldEncoder "value" numericStringEncoder 0 v.value
            ]


type alias SuccessResponse =
    { value : Bool -- 1
    }


successResponseDecoder : JD.Decoder SuccessResponse
successResponseDecoder =
    JD.lazy <|
        \_ ->
            decode SuccessResponse
                |> required "value" JD.bool False


successResponseEncoder : SuccessResponse -> JE.Value
successResponseEncoder v =
    JE.object <|
        List.filterMap identity <|
            [ requiredFieldEncoder "value" JE.bool False v.value
            ]


type alias StringResponse =
    { value : String -- 1
    }


stringResponseDecoder : JD.Decoder StringResponse
stringResponseDecoder =
    JD.lazy <|
        \_ ->
            decode StringResponse
                |> required "value" JD.string ""


stringResponseEncoder : StringResponse -> JE.Value
stringResponseEncoder v =
    JE.object <|
        List.filterMap identity <|
            [ requiredFieldEncoder "value" JE.string "" v.value
            ]


type alias PeerConnectRequest =
    { ip : Maybe String -- 1
    , port_ : Maybe Int -- 2
    }


peerConnectRequestDecoder : JD.Decoder PeerConnectRequest
peerConnectRequestDecoder =
    JD.lazy <|
        \_ ->
            decode PeerConnectRequest
                |> optional "ip" stringValueDecoder
                |> optional "port" intValueDecoder


peerConnectRequestEncoder : PeerConnectRequest -> JE.Value
peerConnectRequestEncoder v =
    JE.object <|
        List.filterMap identity <|
            [ optionalEncoder "ip" stringValueEncoder v.ip
            , optionalEncoder "port" intValueEncoder v.port_
            ]


type alias PeerElement =
    { nodeId : Maybe String -- 1
    , port_ : Maybe Int -- 2
    , ip : Maybe String -- 3
    }


peerElementDecoder : JD.Decoder PeerElement
peerElementDecoder =
    JD.lazy <|
        \_ ->
            decode PeerElement
                |> optional "nodeId" stringValueDecoder
                |> optional "port" intValueDecoder
                |> optional "ip" stringValueDecoder


peerElementEncoder : PeerElement -> JE.Value
peerElementEncoder v =
    JE.object <|
        List.filterMap identity <|
            [ optionalEncoder "nodeId" stringValueEncoder v.nodeId
            , optionalEncoder "port" intValueEncoder v.port_
            , optionalEncoder "ip" stringValueEncoder v.ip
            ]


type alias PeerListResponse =
    { peer : List PeerElement -- 1
    }


peerListResponseDecoder : JD.Decoder PeerListResponse
peerListResponseDecoder =
    JD.lazy <|
        \_ ->
            decode PeerListResponse
                |> repeated "peer" peerElementDecoder


peerListResponseEncoder : PeerListResponse -> JE.Value
peerListResponseEncoder v =
    JE.object <|
        List.filterMap identity <|
            [ repeatedFieldEncoder "peer" peerElementEncoder v.peer
            ]


type alias PeerStatsResponse =
    { peerstats : List PeerStatsResponse_PeerStats -- 1
    }


peerStatsResponseDecoder : JD.Decoder PeerStatsResponse
peerStatsResponseDecoder =
    JD.lazy <|
        \_ ->
            decode PeerStatsResponse
                |> repeated "peerstats" peerStatsResponse_PeerStatsDecoder


peerStatsResponseEncoder : PeerStatsResponse -> JE.Value
peerStatsResponseEncoder v =
    JE.object <|
        List.filterMap identity <|
            [ repeatedFieldEncoder "peerstats" peerStatsResponse_PeerStatsEncoder v.peerstats
            ]


type alias PeerStatsResponse_PeerStats =
    { nodeId : String -- 1
    , packetsSent : Int -- 2
    , packetsReceived : Int -- 3
    , measuredLatency : Int -- 4
    }


peerStatsResponse_PeerStatsDecoder : JD.Decoder PeerStatsResponse_PeerStats
peerStatsResponse_PeerStatsDecoder =
    JD.lazy <|
        \_ ->
            decode PeerStatsResponse_PeerStats
                |> required "nodeId" JD.string ""
                |> required "packetsSent" intDecoder 0
                |> required "packetsReceived" intDecoder 0
                |> required "measuredLatency" intDecoder 0


peerStatsResponse_PeerStatsEncoder : PeerStatsResponse_PeerStats -> JE.Value
peerStatsResponse_PeerStatsEncoder v =
    JE.object <|
        List.filterMap identity <|
            [ requiredFieldEncoder "nodeId" JE.string "" v.nodeId
            , requiredFieldEncoder "packetsSent" numericStringEncoder 0 v.packetsSent
            , requiredFieldEncoder "packetsReceived" numericStringEncoder 0 v.packetsReceived
            , requiredFieldEncoder "measuredLatency" numericStringEncoder 0 v.measuredLatency
            ]


type alias SendMessageRequest =
    { nodeId : Maybe String -- 1
    , networkId : Maybe Int -- 2
    , message : Maybe Bytes -- 3
    , broadcast : Maybe Bool -- 4
    }


sendMessageRequestDecoder : JD.Decoder SendMessageRequest
sendMessageRequestDecoder =
    JD.lazy <|
        \_ ->
            decode SendMessageRequest
                |> optional "nodeId" stringValueDecoder
                |> optional "networkId" intValueDecoder
                |> optional "message" bytesValueDecoder
                |> optional "broadcast" boolValueDecoder


sendMessageRequestEncoder : SendMessageRequest -> JE.Value
sendMessageRequestEncoder v =
    JE.object <|
        List.filterMap identity <|
            [ optionalEncoder "nodeId" stringValueEncoder v.nodeId
            , optionalEncoder "networkId" intValueEncoder v.networkId
            , optionalEncoder "message" bytesValueEncoder v.message
            , optionalEncoder "broadcast" boolValueEncoder v.broadcast
            ]


type alias MessageDirect =
    { data : Bytes -- 1
    }


messageDirectDecoder : JD.Decoder MessageDirect
messageDirectDecoder =
    JD.lazy <|
        \_ ->
            decode MessageDirect
                |> required "data" bytesFieldDecoder []


messageDirectEncoder : MessageDirect -> JE.Value
messageDirectEncoder v =
    JE.object <|
        List.filterMap identity <|
            [ requiredFieldEncoder "data" bytesFieldEncoder [] v.data
            ]


type alias MessageBroadcast =
    { data : Bytes -- 1
    }


messageBroadcastDecoder : JD.Decoder MessageBroadcast
messageBroadcastDecoder =
    JD.lazy <|
        \_ ->
            decode MessageBroadcast
                |> required "data" bytesFieldDecoder []


messageBroadcastEncoder : MessageBroadcast -> JE.Value
messageBroadcastEncoder v =
    JE.object <|
        List.filterMap identity <|
            [ requiredFieldEncoder "data" bytesFieldEncoder [] v.data
            ]


type alias MessageNone =
    {}


messageNoneDecoder : JD.Decoder MessageNone
messageNoneDecoder =
    JD.lazy <| \_ -> decode MessageNone


messageNoneEncoder : MessageNone -> JE.Value
messageNoneEncoder v =
    JE.object <|
        List.filterMap identity <|
            []


type alias P2PNetworkMessage =
    { receivedAt : Int -- 1
    , sentAt : Int -- 2
    , sender : String -- 3
    , networkId : Int -- 4
    , messageId : String -- 5
    , payload : Payload
    }


type Payload
    = PayloadUnspecified
    | MessageDirect_ MessageDirect
    | MessageBroadcast_ MessageBroadcast
    | MessageNone_ MessageNone


payloadDecoder : JD.Decoder Payload
payloadDecoder =
    JD.lazy <|
        \_ ->
            JD.oneOf
                [ JD.map MessageDirect_ (JD.field "messageDirect" messageDirectDecoder)
                , JD.map MessageBroadcast_ (JD.field "messageBroadcast" messageBroadcastDecoder)
                , JD.map MessageNone_ (JD.field "messageNone" messageNoneDecoder)
                , JD.succeed PayloadUnspecified
                ]


payloadEncoder : Payload -> Maybe ( String, JE.Value )
payloadEncoder v =
    case v of
        PayloadUnspecified ->
            Nothing

        MessageDirect_ x ->
            Just ( "messageDirect", messageDirectEncoder x )

        MessageBroadcast_ x ->
            Just ( "messageBroadcast", messageBroadcastEncoder x )

        MessageNone_ x ->
            Just ( "messageNone", messageNoneEncoder x )


p2PNetworkMessageDecoder : JD.Decoder P2PNetworkMessage
p2PNetworkMessageDecoder =
    JD.lazy <|
        \_ ->
            decode P2PNetworkMessage
                |> required "receivedAt" intDecoder 0
                |> required "sentAt" intDecoder 0
                |> required "sender" JD.string ""
                |> required "networkId" intDecoder 0
                |> required "messageId" JD.string ""
                |> field payloadDecoder


p2PNetworkMessageEncoder : P2PNetworkMessage -> JE.Value
p2PNetworkMessageEncoder v =
    JE.object <|
        List.filterMap identity <|
            [ requiredFieldEncoder "receivedAt" numericStringEncoder 0 v.receivedAt
            , requiredFieldEncoder "sentAt" numericStringEncoder 0 v.sentAt
            , requiredFieldEncoder "sender" JE.string "" v.sender
            , requiredFieldEncoder "networkId" JE.int 0 v.networkId
            , requiredFieldEncoder "messageId" JE.string "" v.messageId
            , payloadEncoder v.payload
            ]


type alias NetworkChangeRequest =
    { networkId : Maybe Int -- 1
    }


networkChangeRequestDecoder : JD.Decoder NetworkChangeRequest
networkChangeRequestDecoder =
    JD.lazy <|
        \_ ->
            decode NetworkChangeRequest
                |> optional "networkId" intValueDecoder


networkChangeRequestEncoder : NetworkChangeRequest -> JE.Value
networkChangeRequestEncoder v =
    JE.object <|
        List.filterMap identity <|
            [ optionalEncoder "networkId" intValueEncoder v.networkId
            ]


type alias Empty =
    {}


emptyDecoder : JD.Decoder Empty
emptyDecoder =
    JD.lazy <| \_ -> decode Empty


emptyEncoder : Empty -> JE.Value
emptyEncoder v =
    JE.object <|
        List.filterMap identity <|
            []
